extern void UArray2b_map(UArray2b_T array2b, 
                           void apply(int applyCol, int applyRow, UArray2b_T array2b, 
                                      void *elem, void *closure), 
                           void *cl)
{
        printf("in map\n");
        assert(array2b);
        int bsize = array2b->blocksize;
        int row = 0;
        int col = 0;

        double ceilheight = array2b->height;
        double ceilwidth = array2b->width;
        double ceilblock = array2b->blocksize;

        double blockheight = ceil(ceilheight/ceilblock);
        double blockwidth = ceil(ceilwidth/ceilblock);

        int extraRows = array2b->height % array2b->blocksize;
        int extraCols = array2b->width % array2b->blocksize;
        printf("extraCols: %d, extraRows: %d\n", extraCols, extraRows);

        //int blocksize = blockheight * blockwidth;
        int bsizesize = bsize * bsize;

        printf("using pointers w: %f, h: %f, bs: %f\n", ceilheight, ceilwidth, ceilblock);
        printf("using functions w: %d, h: %d, bs: %d\n", UArray2b_height(array2b), UArray2b_width(array2b), UArray2b_blocksize(array2b));

        printf("before loops\n");
        printf("bw: %f, bh: %f\n", blockwidth, blockheight);
        for (int i = 0; i < blockheight; i++) {
                printf("in first loop\n");
                if (i == (blockheight -1)) {
                                bsizesize = extraRows;
                                //bsize = extraCols;
                        }
                for (int j = 0; j < blockwidth; j++) {
                        // UArray_T *thisblock = UArray2_at(array2b->blocks, i, j);
                        printf("i: %d, j: %d\n", i, j);
                        if (j == (blockwidth -1)) {
                                bsizesize = extraCols;
                                //bsize = extraCols;
                        }
                        for (int k = 0; k < (bsizesize); k++){
                                //printf("before apply k = %d, bsize: %d, block size: %d\n", k, bsizesize, blocksize);
                                apply(col, row, array2b, UArray2b_at(array2b, col, row), cl);
                                printf("[%d, %d]\n", col, row);

                                col++;
                               // printf("col before: %d\n", col);
                                if (col % bsize == 0) {
                                        col -= bsize;
                                }
                              //  printf("col after: %d", col);
                                if (k % bsize == bsize - 1){
                                        row++;
                                }
                        }
                        // if ((col == array2b->width) || (row == array2b->height)) {
                        //         return;
                        // } else {
                        row -= bsize;
                        col += bsize;
                        printf("col outside: %d\n", col);
                        }
                }
                row += bsize;
                col = 0;
        }